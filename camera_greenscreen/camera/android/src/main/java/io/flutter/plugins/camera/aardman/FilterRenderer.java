package io.flutter.plugins.camera.aardman;

import android.graphics.SurfaceTexture;
import android.hardware.Camera;
import android.opengl.GLES20;

import java.io.IOException;

import jp.co.cyberagent.android.gpuimage.GPUImageRenderer;
import jp.co.cyberagent.android.gpuimage.filter.GPUImageFilter;


//Override required to provide ability to initialise the SurfaceTexture that
//is the render target using the texture generated by Flutter
public class FilterRenderer extends GPURenderer
implements FilterImageInput {

      FilterParameters filterParameters;


    public FilterRenderer(final GPUImageFilter filter) {
        super(filter);
    }

      public void initialiseSurfaceTextureForFlutterDisplay(SurfaceTexture flutterTexture){
            setUpSurfaceTexture(flutterTexture);
      }

      private void setUpSurfaceTexture(SurfaceTexture flutterTexture) {
        runOnDraw(new Runnable() {
            @Override
            public void run() {
                surfaceTexture = flutterTexture;
//                    try {
//                        camera.setPreviewTexture(surfaceTexture);
//                        camera.setPreviewCallback(jp.co.cyberagent.android.gpuimage.GPUImageRenderer.this);
//                        camera.startPreview();
//                    } catch (IOException e) {
//                        e.printStackTrace();
//                    }
            }
        });
    }

    void updateFilterParameters(FilterParameters filterParameters){
          ///update input to the filter
          this.filterParameters = filterParameters;
      }

      void initialiseParameters(FilterParameters filterParameters){
          this.filterParameters = filterParameters;
      }

    /**
     *  FilterImageInput Implementation
     */
    public void handleNextImageFrame(){

    }


}
